/* ******************************************************************************************************************************
 * 
 * Scenario 1: SCD1 and SCD2 incremental data processing
 *     
 ****************************************************************************************************************************** */

------------------------------------------------------------------------------------------------------------------
-- Initialization
------------------------------------------------------------------------------------------------------------------
drop table if exists dim_customer;
create table dim_customer(
    customer_sk serial primary key,
    customer_bk varchar(255),
    full_name  varchar(255),   -- SCD1 attribure
    country varchar(255),      -- SCD2 attribure
    state_region varchar(255), -- SCD2 attribure
    valid_from timestamp,
    valid_to timestamp
);
truncate table dim_customer;
insert into dim_customer(customer_bk, full_name, country, state_region, valid_from, valid_to) 
values 
('us101', 'Lori Smith', 'US', 'Texas', '1900-01-01','9999-12-31 23:59:59'),
('uk101', 'Ivan Kohut', 'Ukraine', 'Lviv', '1900-01-01','2020-10-31 23:59:59'),
('uk101', 'Ivan Kohut', 'Ukraine', 'Kyiv', '2020-11-01','9999-12-31 23:59:59'),
('uk102', 'Oksana Lysytsia', 'Ukraine', 'Ternopil', '1900-01-01','9999-12-31 23:59:59'),
('uk103', 'Iryna Vovk', 'Ukraine', 'Ivano-Frankivsk', '1900-01-01','9999-12-31 23:59:59');


drop table if exists stg_customer;
create table stg_customer(
    customer_bk varchar(255) primary key,
    full_name  varchar(255),
    country varchar(255),
    state_region varchar(255)
);
truncate table stg_customer;
insert into stg_customer(customer_bk, full_name, country, state_region) 
values 
('us101', 'Lorelei Smith', 'US', 'Texas'), 
('us102', 'Chris Black', 'US', 'California'),
('uk101', 'Ivan Kohut-Baran', 'Ukraine', 'Irpin'),
('uk102', 'Oksana Lysytsia-Vovk', 'Ukraine', 'Ternopil'),
('uk103', 'Iryna Vovk', 'Ukraine', 'Ivano-Frankivsk');



/* ******************************************************************************************************************************
 * Exersize #1:
 * Prepare a SQL script (sequence of SQL statements) to implement the merging of the stg_customer (increment of the customer data) 
 * into the target dim_customer dimension table  
 ****************************************************************************************************************************** */


-- Here is a sequence of SQL statements that you can use to implement the merging of data from the stg_customer table into the dim_customer table:
-- First, create a temporary table that contains the data from the stg_customer table and the existing data in the dim_customer table that has a matching customer_bk value:


CREATE TEMPORARY TABLE temp_customer AS
    SELECT stg.*, dim.customer_sk, dim.valid_from, dim.valid_to
    FROM stg_customer stg
    LEFT JOIN dim_customer dim ON stg.customer_bk = dim.customer_bk;

-- Next, update the valid_to column in the dim_customer table for any records that have a matching customer_bk value in the temp_customer table and a NULL value in the customer_sk column:


UPDATE dim_customer dim
SET valid_to = NOW()
FROM temp_customer temp
WHERE temp.customer_sk IS NULL AND dim.customer_bk = temp.customer_bk;


-- Insert the data from the temp_customer table into the dim_customer table, but only for records that have a NULL value in the customer_sk column:

INSERT INTO dim_customer (customer_bk, full_name, country, state_region, valid_from, valid_to)
SELECT temp.customer_bk, temp.full_name, temp.country, temp.state_region, NOW(), '9999-12-31 23:59:59'
FROM temp_customer temp
WHERE temp.customer_sk IS NULL;



-- Finally, update the full_name, country, and state_region columns in the dim_customer table 
-- for any records that have a matching customer_bk value in the temp_customer table and a NOT NULL value in the customer_sk column:

UPDATE dim_customer dim
SET full_name = temp.full_name, country = temp.country, state_region = temp.state_region
FROM temp_customer temp
WHERE temp.customer_sk IS NOT NULL AND dim.customer_bk = temp.customer_bk;


-- This sequence of statements will merge the data from the stg_customer table into the dim_customer table, while preserving the valid_from and valid_to columns to support SCD1 and SCD2 type 2 changes.



