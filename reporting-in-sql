--Setup a query that shows unique events by country and season for summer events.
--Setup a similar query that shows unique events by country and season for winter events.
--Combine the two queries using a UNION ALL.
--Sort the report by events in descending order.

-- Query season, country, and events for all summer events
SELECT 
	'summer' AS season, 
    country, 
    count(distinct event) AS events
FROM summer_games AS s
JOIN countries AS c
ON s.country_id = c.id
GROUP BY country, season
-- Combine the queries
UNION
-- Query season, country, and events for all winter events
SELECT 
	distinct 'winter' AS season, 
    country, 
    count(distinct event) AS events
FROM winter_games AS w
JOIN countries AS c
ON w.country_id = c.id
GROUP BY country, season
-- Sort the results to show most events at the top
ORDER BY events;


--In the subquery, construct a query that outputs season, country_id and event by combining summer and winter games with a UNION ALL.
--Leverage a JOIN and another SELECT statement to show the fields season, country and unique events.
--GROUP BY any unaggregated fields.
--Sort the report by events in descending order.


-- Add outer layer to pull season, country and unique events
SELECT 
	season, 
    country, 
    count(distinct event) AS events
FROM
    -- Pull season, country_id, and event for both seasons
    (SELECT 
     	'summer' AS season, 
     	country_id, 
     	event
    FROM summer_games
    UNION
    SELECT 
        'winter' AS season, 
     	country_id, 
     	event
    FROM winter_games) AS subquery
JOIN countries AS c
ON subquery.country_id = c.id
-- Group by any unaggregated fields
GROUP BY season, country
-- Order to show most events at the top
ORDER BY events desc;


--Update the CASE statement to output three values: Tall Female, Tall Male, and Other.
SELECT 
	name,
    -- Output 'Tall Female', 'Tall Male', or 'Other'
	CASE 
    when gender = 'F' and height >= 175 then 'Tall Female'
    when gender = 'M' and height >= 190 then 'Tall Male'
    else 'Other'
    END AS segment
FROM athletes;


--Build a query that pulls from summer_games and athletes to show sport, bmi_bucket, and athletes.
--Without using AND or ELSE, set up a CASE statement that splits bmi_bucket into three groups: '<.25', '.25-.30', and '>.30'.
--Group by the non-aggregated fields.
--Order the report by sport and then athletes in descending order.
-- Pull in sport, bmi_bucket, and athletes
-- Pull in sport, bmi_bucket, and athletes
SELECT 
	sport,
    -- Bucket BMI in three groups: <.25, .25-.30, and >.30	
    CASE 
    WHEN (100 * weight / (height^2)) < 0.25 THEN '<.25'
    WHEN (100 * weight / (height^2)) >= 0.25 and (100 * weight / (height^2)) < 0.3 THEN '.25-.30'
    WHEN (100 * weight / (height^2)) >= 0.3 THEN '>.30' 
    END AS bmi_bucket,
    count(distinct athlete_id) AS athletes
FROM summer_games AS s
JOIN athletes AS a
ON s.athlete_id = a.id
-- GROUP BY non-aggregated fields
GROUP BY sport, bmi_bucket
-- Sort by sport and then by athletes in descending order
ORDER BY athletes, sport asc;



-- Now consider the following visualization:
-- Using the summer_games table, run a query that creates the base report that sources this visualization.
-- Query sport, events, and athletes from summer_games
SELECT 
	sport, 
    count(distinct event) AS events, 
    count(distinct athlete_id) AS athletes
FROM summer_games
GROUP BY sport;


--In the previous exercise, you identified which tables are needed to create a report that shows Age of Oldest Athlete by Region. 
-- Now, set up the query to create this report.
-- Select the age of the oldest athlete for each region
SELECT 
	region, 
    max(a.age) AS age_of_oldest_athlete
FROM athletes as a
-- First JOIN statement
JOIN summer_games as b
on a.id = b.athlete_id
-- Second JOIN statement
JOIN countries as c
on b.country_id = c.id
GROUP BY region;


-- The full E:R diagram for the database is shown below:
-- Since the company will be involved in both summer sports and winter sports, it is beneficial to look at all sports in one centralized report.
-- Your task is to create a query that shows the unique number of events held for each sport. Note that since no relationships exist between these two tables, you will need to use a UNION instead of a JOIN.
-- Select sport and events for summer sports
SELECT 
	sport, 
    count(distinct event) AS events
FROM summer_games
group by sport
UNION


SELECT 
	sport, 
    count(distinct event) AS events
FROM winter_games
group by sport
-- Show the most events at the top of the report
order by events desc;



-- Add the rows column to your query
SELECT 
	bronze, 
	count(*) AS rows
FROM summer_games
GROUP BY bronze;


-- The same techniques we use to explore the data can be used to validate queries. By using the query as a subquery, you can run exploratory techniques to confirm the query results are as expected.
-- In this exercise, you will create a query that shows Bronze Medals by Country and then validate it using the subquery technique.
-- Feel free to reference the E:R Diagram as needed.
-- Pull total_bronze_medals from summer_games below

SELECT sum(bronze) AS total_bronze_medals
FROM summer_games;



/* Pull total_bronze_medals from summer_games below
SELECT SUM(bronze) AS total_bronze_medals
FROM summer_games; 
>> OUTPUT = 141 total_bronze_medals */



-- Setup a query that shows bronze_medal by country
SELECT 
	c.country, 
    sum(bronze) AS bronze_medals
FROM summer_games AS s
JOIN countries AS c
ON s.country_id = c.id
GROUP BY c.country;




/* Pull total_bronze_medals below
SELECT SUM(bronze) AS total_bronze_medals
FROM summer_games; 
>> OUTPUT = 141 total_bronze_medals */

-- Select the total bronze_medals from your query
SELECT sum(a.bronze_medals)
FROM 
-- Previous query is shown below.  Alias this AS subquery
(SELECT 
      country, 
      SUM(bronze) AS bronze_medals
  FROM summer_games AS s
  JOIN countries AS c
  ON s.country_id = c.id
  GROUP BY country) a 
;


-- Report 1: Most decorated summer athletes
-- Now that you have a good understanding of the data, let's get back to our case study and build out the first element for the dashboard, Most Decorated Summer Athletes:
-- Your job is to create the base report for this element. Base report details:
-- Column 1 should be athlete_name.
-- Column 2 should be gold_medals.
-- The report should only include athletes with at least 3 medals.
-- The report should be ordered by gold medals won, with the most medals at the top.

-- Pull athlete_name and gold_medals for summer games
SELECT 
	a.name AS athlete_name, 
    sum(s.gold) AS gold_medals
FROM summer_games AS s
JOIN athletes AS a
ON s.athlete_id = a.id
GROUP BY a.name
-- Filter for only athletes with 3 gold medals or more
having sum(s.gold) > 2
-- Sort to show the most gold medals at the top
ORDER BY gold_medals desc;


-- Pull in sport, bmi_bucket, and athletes
SELECT 
	sport,
    -- Bucket BMI in three groups: <.25, .25-.30, and >.30	
    CASE 
    WHEN (100 * weight / (height^2)) < 0.25 THEN '<.25'
    WHEN (100 * weight / (height^2)) >= 0.25 and (100 * weight / (height^2)) < 0.3 THEN '.25-.30'
    WHEN (100 * weight / (height^2)) >= 0.3 THEN '>.30' 
    END AS bmi_bucket,
    count(distinct athlete_id) AS athletes
FROM summer_games AS s
JOIN athletes AS a
ON s.athlete_id = a.id
-- GROUP BY non-aggregated fields
GROUP BY sport, bmi_bucket
-- Sort by sport and then by athletes in descending order
ORDER BY athletes, sport asc;


-- Comment out the troubleshooting query
SELECT 
	height, 
    weight, 
    weight/height^2*100 AS bmi
FROM athletes
WHERE weight/height^2*100 IS NULL;


-- Comment out the troubleshooting query
SELECT 
	sport,
    CASE WHEN weight/height^2*100 <.25 THEN '<.25'
    WHEN weight/height^2*100 <=.30 THEN '.25-.30'
    WHEN weight/height^2*100 >.30 THEN '>.30'
    WHEN weight/height^2*100 is null THEN 'no weight recorded'
    -- Add ELSE statement to output 'no weight recorded'
    END AS bmi_bucket,
    COUNT(DISTINCT athlete_id) AS athletes
FROM summer_games AS s
JOIN athletes AS a
ON s.athlete_id = a.id
GROUP BY sport, bmi_bucket
ORDER BY sport, athletes DESC;


-- Pull summer bronze_medals, silver_medals, and gold_medals
SELECT 
	count(bronze) as bronze_medals, 
    count(silver) as silver_medals, 
    count(gold) as gold_medals
FROM summer_games AS s
JOIN athletes AS a
ON s.athlete_id = a.id
-- Filter for athletes age 16 or below
WHERE a.age <= 16;



-- Pull summer bronze_medals, silver_medals, and gold_medals
SELECT 
	count(bronze) as bronze_medals, 
    count(silver) as silver_medals, 
    count(gold) as gold_medals
FROM summer_games
-- Add the WHERE statement below
WHERE athlete_id IN
    -- Create subquery list for athlete_ids age 16 or below    
    (SELECT id
     FROM athletes
     WHERE age <=16);
     
     
     
-- Pull event and unique athletes from summer_games 
SELECT 
	event, 
    -- Add the gender field below
    CASE
    when event like '%Women%' then 'female'
    ELSE 'male'
    END AS gender,
    COUNT(DISTINCT athlete_id) AS athletes
FROM summer_games
GROUP BY event;



-- Pull event and unique athletes from summer_games 
SELECT 
    event,
    -- Add the gender field below
    CASE WHEN event LIKE '%Women%' THEN 'female' 
    ELSE 'male' END AS gender,
    COUNT(DISTINCT athlete_id) AS athletes
FROM summer_games
-- Only include countries that won a nobel prize
WHERE country_id IN 
	(SELECT country_id
    FROM country_stats
    WHERE nobel_prize_winners !=0)
GROUP BY event;	



-- Pull event and unique athletes from summer_games 
SELECT 
    event,
    -- Add the gender field below
    CASE WHEN event LIKE '%Women%' THEN 'female' 
    ELSE 'male' END AS gender,
    COUNT(DISTINCT athlete_id) AS athletes
FROM summer_games
-- Only include countries that won a nobel prize
WHERE country_id IN 
	(SELECT country_id 
    FROM country_stats 
    WHERE nobel_prize_winners > 0)
GROUP BY event
-- Add the second query below and combine with a UNION
UNION
SELECT 
	event,
    CASE WHEN event LIKE '%Women%' THEN 'female' 
	ELSE 'male' END AS gender,
	COUNT(DISTINCT athlete_id) AS athletes
FROM winter_games
WHERE country_id IN 
	(SELECT country_id 
    FROM country_stats 
    WHERE nobel_prize_winners > 0)
GROUP BY event
-- Order and limit the final output
ORDER BY athletes desc 



-- Pull column_name & data_type from the columns table
SELECT 
	column_name,
    data_type
FROM INFORMATION_SCHEMA.COLUMNS
-- Filter for the table 'country_stats'
WHERE table_name = 'country_stats';


-- Run the query, then convert a data type to fix the error
SELECT AVG(pop_in_millions::float) AS avg_population
FROM country_stats;


-- Comment out the previous query
/*SELECT AVG(CAST(pop_in_millions AS float)) AS avg_population
FROM country_stats;*/

-- Uncomment the following block & run the query
SELECT 
	s.country_id, 
    COUNT(DISTINCT s.athlete_id) AS summer_athletes, 
    COUNT(DISTINCT w.athlete_id) AS winter_athletes
FROM summer_games AS s
JOIN winter_games_str AS w
-- Fix the error by making both columns integers
ON cast(s.country_id as int) = cast(w.country_id as int)
GROUP BY s.country_id;
LIMIT 10;


SELECT 
	year,
    -- Pull decade, decade_truncate, and the world's gdp
    DATE_PART('decade', cast(year as date)) AS decade,
    DATE_TRUNC('decade', cast(year as date)) AS decade_truncated,
    sum(gdp) AS world_gdp
FROM country_stats
-- Group and order by year in descending order
GROUP BY year 
ORDER BY year desc;



-- Convert country to lower case
SELECT 
	country, 
    LOWER(country) AS country_altered
FROM countries
GROUP BY country;


-- Convert country to proper case
SELECT 
	country, 
    INITCAP(country) AS country_altered
FROM countries
GROUP BY country;


-- Output the left 3 characters of country
SELECT 
	country, 
    left(country, 3) AS country_altered
FROM countries
GROUP BY country;


-- Output all characters starting with position 7
SELECT 
	country, 
    SUBSTRING(country,7) AS country_altered
FROM countries
GROUP BY country;



SELECT 
	region, 
    -- Replace all '&' characters with the string 'and'
    REPLACE(region,'&','and') AS character_swap,
    -- Remove all periods
    REPLACE(region,'.','') AS character_remove,
    -- Combine the functions to run both changes at once
    REPLACE(replace(region,'.',''),'&','and') AS character_swap_and_remove
FROM countries
WHERE region = 'LATIN AMER. & CARIB'
GROUP BY region;


-- Pull event and unique athletes from summer_games_messy 
SELECT 
	event, 
    count(distinct athlete_id) AS athletes
FROM summer_games_messy
-- Group by the non-aggregated field
GROUP BY event;


-- Pull event and unique athletes from summer_games_messy 
SELECT 
    -- Remove dashes from all event values
    replace(TRIM(event), '-', '') AS event_fixed, 
    COUNT(DISTINCT athlete_id) AS athletes
FROM summer_games_messy
-- Update the group by accordingly
GROUP BY event_fixed;


--Filtering out nulls
--One way to deal with nulls is to simply filter them out. There are two important conditionals related to nulls:
--IS NULL is true for any value that is null.
--IS NOT NULL is true for any value that is not null. Note that a zero or a blank cell is not the same as a null.
--These conditionals can be leveraged by several clauses, such as CASE statements, WHERE statements, and HAVING statements. In this exercise, you will learn how to filter out nulls using two separate techniques.
--Feel free to reference the E:R Diagram.
-- Show total gold_medals by country
SELECT 
	country,
    sum(gold) AS gold_medals
FROM winter_games AS w
JOIN countries AS c
ON w.country_id = c.id
GROUP BY country
-- Order by gold_medals in descending order
ORDER BY gold_medals;


-- Show total gold_medals by country
SELECT 
	country, 
    SUM(gold) AS gold_medals
FROM winter_games AS w
JOIN countries AS c
ON w.country_id = c.id
-- Removes any row with no gold medals
WHERE gold is not null
GROUP BY country
-- Order by gold_medals in descending order
ORDER BY gold_medals DESC;



-- Show total gold_medals by country
SELECT 
	country, 
    SUM(gold) AS gold_medals
FROM winter_games AS w
JOIN countries AS c
ON w.country_id = c.id
-- Comment out the WHERE statement
WHERE gold IS NOT NULL
GROUP BY country
-- Replace WHERE statement with equivalent HAVING statement
HAVING SUM(gold) > 0
-- Order by gold_medals in descending order
ORDER BY gold_medals DESC;




-- Pull events and golds by athlete_id for summer events
SELECT 
    athlete_id,
    count(distinct event) AS total_events, 
    sum(gold) AS gold_medals
FROM summer_games
GROUP BY athlete_id
-- Order by total_events descending and athlete_id ascending
ORDER BY total_events desc, athlete_id asc;


-- Pull events and golds by athlete_id for summer events
SELECT 
    athlete_id, 
    -- Add a field that averages the existing gold field
    avg(gold) AS avg_golds,
    COUNT(event) AS total_events, 
    SUM(gold) AS gold_medals
FROM summer_games
GROUP BY athlete_id
-- Order by total_events descending and athlete_id ascending
ORDER BY total_events DESC, athlete_id;


-- Pull events and golds by athlete_id for summer events
SELECT 
    athlete_id, 
    -- Replace all null gold values with 0
    AVG(COALESCE(gold, 0)) AS avg_golds,
    COUNT(event) AS total_events, 
    SUM(gold) AS gold_medals
FROM summer_games
GROUP BY athlete_id
-- Order by total_events descending and athlete_id ascending
ORDER BY total_events DESC, athlete_id;



-- Comment out the query after noting the gold medal count
--SELECT SUM(gold) AS gold_medals
--FROM winter_games;
-- TOTAL GOLD MEDALS: ____  

-- Show gold_medals and avg_gdp by country_id
SELECT 
	c.country_id, 
    sum(gold) AS gold_medals, 
    avg(gdp) AS avg_gdp
FROM winter_games AS w
JOIN country_stats AS c
-- Only join on the country_id fields
ON w.country_id = c.country_id
GROUP BY c.country_id;



-- Comment out the query after noting the gold medal count
/*SELECT SUM(gold) AS gold_medals
FROM winter_games;*/
-- TOTAL GOLD MEDALS: 47 

-- Calculate the total gold_medals in your query
SELECT sum(gold_medals)
FROM
	(SELECT 
        w.country_id, 
     	SUM(gold) AS gold_medals, 
        AVG(gdp) AS avg_gdp
    FROM winter_games AS w
    JOIN country_stats AS c
    ON c.country_id = w.country_id
    -- Alias your query as subquery
    GROUP BY w.country_id) AS subquery;	



SELECT SUM(gold_medals) AS gold_medals
FROM
	(SELECT 
     	w.country_id, 
     	SUM(gold) AS gold_medals, 
     	AVG(gdp) AS avg_gdp
    FROM winter_games AS w
    JOIN country_stats AS c
    -- Update the subquery to join on a second field
    ON w.country_id = c.country_id
    and cast(w.year as date) = cast(c.year as date) 
    GROUP BY w.country_id) AS subquery;
    
    
    SELECT 
	c.country,
    -- Add the three medal fields using one sum function
	sum(coalesce (bronze,0)) + sum(coalesce(silver,0)) + sum(coalesce(gold, 0)) AS medals
FROM summer_games AS s
JOIN countries AS c
ON s.country_id = c.id
GROUP BY c.country
ORDER BY medals DESC;



SELECT 
	c.country,
    -- Pull in pop_in_millions and medals_per_million 
	pop_in_millions,
    -- Add the three medal fields using one sum function
	SUM(COALESCE(bronze,0) + COALESCE(silver,0) + COALESCE(gold,0)) AS medals,
	SUM(COALESCE(bronze,0) + COALESCE(silver,0) + COALESCE(gold,0)) / CAST(cs.pop_in_millions AS float) AS medals_per_million
FROM summer_games AS s
JOIN countries AS c 
ON s.country_id = c.id
-- Update the newest join statement to remove duplication
JOIN country_stats AS cs 
ON s.country_id = cs.country_id
GROUP BY c.country, pop_in_millions
ORDER BY medals DESC;



SELECT 
	c.country,
    -- Pull in pop_in_millions and medals_per_million 
	pop_in_millions,
    -- Add the three medal fields using one sum function
	SUM(COALESCE(bronze,0) + COALESCE(silver,0) + COALESCE(gold,0)) AS medals,
	SUM(COALESCE(bronze,0) + COALESCE(silver,0) + COALESCE(gold,0)) / CAST(cs.pop_in_millions AS float) AS medals_per_million
FROM summer_games AS s
JOIN countries AS c 
ON s.country_id = c.id
-- Update the newest join statement to remove duplication
JOIN country_stats AS cs 
ON s.country_id = cs.country_id
and cast(s.year as date)  = cast(cs.year as date)
GROUP BY c.country, pop_in_millions
ORDER BY medals DESC;


SELECT 
	-- Clean the country field to only show country_code
    left(upper(trim(replace(c.country, '.',''))),3) as country_code,
    -- Pull in pop_in_millions and medals_per_million 
	pop_in_millions,
    -- Add the three medal fields using one sum function
	SUM(COALESCE(bronze,0) + COALESCE(silver,0) + COALESCE(gold,0)) AS medals,
	SUM(COALESCE(bronze,0) + COALESCE(silver,0) + COALESCE(gold,0)) / CAST(cs.pop_in_millions AS float) AS medals_per_million
FROM summer_games AS s
JOIN countries AS c 
ON s.country_id = c.id
-- Update the newest join statement to remove duplication
JOIN country_stats AS cs 
ON s.country_id = cs.country_id AND s.year = CAST(cs.year AS date)
-- Filter out null populations
WHERE pop_in_millions is not null
GROUP BY c.country, pop_in_millions
-- Keep only the top 25 medals_per_million rows
ORDER BY medals_per_million desc
LIMIT 25;




SELECT 
	country_id,
    year,
    gdp,
    -- Show the average gdp across all years per country
	avg(gdp) over (partition by country_id)  AS country_avg_gdp
FROM country_stats;



SELECT 
	country_id,
    year,
    gdp, 
    -- Show max gdp for the table and alias accordingly
	MAX(gdp) over() AS global_max_gdp
FROM country_stats
group by country_id, year, gdp;





-- Pull in avg_total_golds by region
SELECT 
	region,
  avg(total_golds) AS avg_total_golds
FROM
  (SELECT 
      region, 
      country_id, 
      SUM(gold) AS total_golds
  FROM summer_games_clean AS s
  JOIN countries AS c
  ON s.country_id = c.id
  -- Alias the subquery
  GROUP BY region, country_id) AS a
GROUP BY region
-- Order by avg_total_golds in descending order
ORDER BY avg_total_golds desc;




SELECT 
	-- Query region, athlete_name, and total gold medals
	region, 
    name AS athlete_name, 
    sum(gold) AS total_golds,
    -- Assign a regional rank to each athlete
    ROW_NUMBER() over(partition by region) AS row_num
FROM summer_games_clean AS s
JOIN athletes AS a
ON s.athlete_id = a.id
JOIN countries AS c
ON s.country_id = c.id
GROUP BY region, a.name;


-- Query region, athlete name, and total_golds
SELECT 
	region,
    athlete_name,
    total_golds
FROM
    (SELECT 
		-- Query region, athlete_name, and total gold medals
        region, 
        a.name AS athlete_name, 
        SUM(gold) AS total_golds,
        -- Assign a regional rank to each athlete
        ROW_NUMBER() OVER (PARTITION BY region ORDER BY SUM(gold) DESC) AS row_num
    FROM summer_games_clean AS s
    JOIN athletes AS a
    ON a.id = s.athlete_id
    JOIN countries AS c
    ON s.country_id = c.id
    -- Alias as subquery
    GROUP BY region, athlete_name) AS a
-- Filter for only the top athlete per region
WHERE row_num = 1;



-- Pull country_gdp by region and country
SELECT 
	region,
    country,
	sum(gdp) AS country_gdp
FROM country_stats AS cs
JOIN countries AS c
ON cs.country_id = c.id
-- Filter out null gdp values
WHERE gdp is not null
GROUP BY region, country
-- Show the highest country_gdp at the top
ORDER BY country_gdp desc;




-- Pull country_gdp by region and country
SELECT 
	region,
    country,
	SUM(gdp) AS country_gdp,
    -- Calculate the global gdp
    SUM(gdp) over() AS global_gdp
FROM country_stats AS cs
JOIN countries AS c
ON cs.country_id = c.id
-- Filter out null gdp values
WHERE gdp IS NOT NULL
GROUP BY region, country, gdp
-- Show the highest country_gdp at the top
ORDER BY country_gdp DESC;



-- Pull country_gdp by region and country
select 	
    region,
    country, 
    country_gdp,
    sum(country_gdp) over() as global_gdp
from
    (SELECT 
	region,
    country,
	SUM(gdp) AS country_gdp -- country's total gdp
-- Calculate the global gdp
FROM country_stats AS cs
JOIN countries AS c
ON cs.country_id = c.id
-- Filter out null gdp values
WHERE gdp IS NOT NULL
--and country = 'U.S.A. - United States'
GROUP BY region, country) as a
-- Show the highest country_gdp at the top




-- Pull country_gdp by region and country
SELECT 
	region,
    country,
	SUM(gdp) AS country_gdp,
    -- Calculate the global gdp
    SUM(SUM(gdp)) OVER () AS global_gdp,
    -- Calculate percent of global gdp
    SUM(gdp) / SUM(SUM(gdp)) OVER () AS perc_global_gdp
FROM country_stats AS cs
JOIN countries AS c
ON cs.country_id = c.id
-- Filter out null gdp values
WHERE gdp IS NOT NULL
GROUP BY region, country
-- Show the highest country_gdp at the top
ORDER BY country_gdp DESC;




-- Pull country_gdp by region and country
SELECT 
	region,
    country,
	SUM(gdp) AS country_gdp,
    -- Calculate the global gdp
    SUM(SUM(gdp)) OVER () AS global_gdp,
    -- Calculate percent of global gdp
    SUM(gdp) / SUM(SUM(gdp)) OVER () AS perc_global_gdp,
    -- Calculate percent of gdp relative to its region
    SUM(gdp) / SUM(SUM(gdp)) OVER (partition by region)  AS perc_region_gdp
FROM country_stats AS cs
JOIN countries AS c
ON cs.country_id = c.id
-- Filter out null gdp values
WHERE gdp IS NOT NULL
GROUP BY region, country
-- Show the highest country_gdp at the top
ORDER BY country_gdp DESC;



-- Bring in region, country, and gdp_per_million
SELECT 
    region,
    country,
    sum(gdp)/sum(pop_in_millions) AS gdp_per_million
-- Pull from country_stats_clean
FROM country_stats_clean AS cs
JOIN countries AS c
ON cs.country_id = c.id
-- Filter for 2016 and remove null gdp values
WHERE year = '2016-01-01'
and gdp is not null
GROUP BY region, country
-- Show highest gdp_per_million at the top
--ORDER BY gdp_per_million desc;



-- Bring in region, country, and gdp_per_million
SELECT 
    region,
    country,
    SUM(gdp) / SUM(pop_in_millions) AS gdp_per_million,
    -- Output the worlds gdp_per_million
    sum(gdp) over() / SUM(pop_in_millions) over () AS gdp_per_million_total
-- Pull from country_stats_clean
FROM country_stats_clean AS cs
JOIN countries AS c 
ON cs.country_id = c.id
-- Filter for 2016 and remove null gdp values
WHERE year = '2016-01-01' AND gdp IS NOT NULL
GROUP BY region, country, cs.pop_in_millions, cs.gdp
-- Show highest gdp_per_million at the top
ORDER BY gdp_per_million DESC;



-- Bring in region, country, and gdp_per_million
SELECT 
    region,
    country,
    SUM(gdp) / SUM(pop_in_millions) AS gdp_per_million,
    -- Output the worlds gdp_per_million
    SUM(SUM(gdp)) OVER () / SUM(SUM(pop_in_millions)) OVER () AS gdp_per_million_total,
    -- Build the performance_index in the 3 lines below
    (SUM(gdp) / SUM(pop_in_millions)
    /
    SUM(SUM(gdp)) OVER () / SUM(SUM(pop_in_millions)) OVER ()) AS performance_index
-- Pull from country_stats_clean
FROM country_stats_clean AS cs
JOIN countries AS c 
ON cs.country_id = c.id
-- Filter for 2016 and remove null gdp values
WHERE year = '2016-01-01' AND gdp IS NOT NULL
GROUP BY region, country
-- Show highest gdp_per_million at the top
ORDER BY gdp_per_million DESC;


-- Bring in region, country, and gdp_per_million
SELECT 
    region,
    country,
    SUM(gdp) / SUM(pop_in_millions) AS gdp_per_million,
    -- Output the worlds gdp_per_million
    SUM(SUM(gdp)) OVER () / SUM(SUM(pop_in_millions)) OVER () AS gdp_per_million_total,
    -- Build the performance_index in the 3 lines below
    (SUM(gdp) / SUM(pop_in_millions))
    /
    (SUM(SUM(gdp)) OVER () / SUM(SUM(pop_in_millions)) OVER ()) AS performance_index
-- Pull from country_stats_clean
FROM country_stats_clean AS cs
JOIN countries AS c 
ON cs.country_id = c.id
-- Filter for 2016 and remove null gdp values
WHERE year = '2016-01-01' AND gdp IS NOT NULL
GROUP BY region, country
-- Show highest gdp_per_million at the top
ORDER BY gdp_per_million DESC;



--Month-over-month comparison
--In order to compare months, you need to use one of the following window functions:
--LAG(value, offset), which outputs a value from an offset number previous to to the current row in the report.
--LEAD(value, offset), which outputs a value from a offset number after the current row in the report.
--Your goal is to build a report that shows each country's month-over-month views. A few tips:
--You will need to bucket dates into months. To do this, you can use the DATE_PART() function.
--You can calculate the percent change using the following formula: (value)/(previous_value) - 1.
--If no offset value is included in the LAG() or LEAD() functions, it will default to 1.
--Since the table stops in the middle of June, the query is set up to only include data to the end of May.
--From web_data, pull in country_id and use a DATE_PART() function to create month.
--Create month_views that pulls the total views within the month.
--Create previous_month_views that pulls the total views from last month for the given country.
--Create the field perc_change that calculates the percent change of this month relative to last month for the given country, where a negative value represents a loss in views and a positive value represents growth.


SELECT
	-- Pull month and country_id
	DATE_PART('month', date) AS month,
	country_id,
    -- Pull in current month views
    sum(views) AS month_views,
    -- Pull in last month views
    lag(sum(views)) over (partition by country_id order by date_part('month', date)) AS previous_month_views,
    -- Calculate the percent change
    sum(views)/(lag(sum(views)) over (partition by country_id order by date_part('month', date))) -1 as perc_change
FROM web_data
WHERE date <= '2018-05-31' 
GROUP BY month, country_id



-- In the previous exercise, you leveraged the set window of a month to calculate month-over-month changes. 
-- But sometimes, you may want to calculate a different time period, such as comparing last 7 days to the previous 7 days. 
-- To calculate a value from the last 7 days, you will need to set up a rolling calculation.
-- In this exercise, you will take the rolling 7 day average of views for each date and compare it to the previous 7 day average for views. 
-- This gives a clear week-over-week comparison for every single day.
-- Syntax for a rolling average is AVG(value) OVER (PARTITION BY field ORDER BY field ROWS BETWEEN N PRECEDING AND CURRENT ROW), where N is the number of rows to look back when doing the calculation. 
-- Remember that CURRENT ROW counts as a row.
-- Show daily_views and weekly_avg by date, where weekly_avg is the rolling 7 day average of views.


SELECT
	-- Pull in date and daily_views
	date,
	sum(views) AS daily_views
    -- Calculate the rolling 7 day average
	,avg(sum(views)) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS weekly_avg
FROM web_data
GROUP BY date


--Alias the query as subquery, add an outer layer that pulls date and weekly_avg, and order by date in descending order.
-- Create the field weekly_avg_previous that takes the weekly_avg from 7 days prior to the given date.
SELECT 
	-- Pull in date and weekly_avg
	date,
    weekly_avg,
    -- Output the value of weekly_avg from 7 days prior
    lag(weekly_avg,7) over (order by date) as weekly_avg_previous
FROM
  (SELECT
      -- Pull in date and daily_views
      date,
      SUM(views) AS daily_views,
      -- Calculate the rolling 7 day average
      AVG(SUM(views)) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS weekly_avg
  FROM web_data
  -- Alias as subquery
  GROUP BY date) AS subquery
  group by date, weekly_avg
-- Order by date in descending order
ORDER BY date asc;




SELECT 
	-- Pull in date and weekly_avg
	date,
    weekly_avg,
    -- Output the value of weekly_avg from 7 days prior
    LAG(weekly_avg,7) OVER (ORDER BY date) AS weekly_avg_previous,
    -- Calculate percent change vs previous period
    weekly_avg / LAG(weekly_avg,7) OVER (ORDER BY date) - 1  AS perc_change
FROM
  (SELECT
      -- Pull in date and daily_views
      date,
      SUM(views) AS daily_views,
      -- Calculate the rolling 7 day average
      AVG(SUM(views)) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS weekly_avg
  FROM web_data
  -- Alias as subquery
  GROUP BY date) AS subquery
-- Order by date in descending order
ORDER BY date DESC;


-- Report 4: Tallest athletes and % GDP by region
-- The final report on the dashboard is Report 4: Avg Tallest Athlete and % of world GDP by Region.
-- Report Details:
-- Column 1 should be region found in the countries table.
-- Column 2 should be avg_tallest, which averages the tallest athlete from each country within the region.
-- Column 3 should be perc_world_gdp, which represents what % of the world's GDP is attributed to the region.
-- Only winter_games should be included (no summer events).

SELECT 
	-- Pull in country_id and height
	country_id,
    height,
    -- Number the height of each country's athletes
    ROW_NUMBER() over(partition by country_id) AS row_num
FROM winter_games AS w
JOIN athletes AS a
ON w.athlete_id = a.id
GROUP BY country_id, height
-- Order by country_id and then height in descending order
ORDER BY country_id, height DESC;
