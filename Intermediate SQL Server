Imputing missing values (I)
In the previous exercise, you looked at the non-missing values in the IncidentState column. 
But what if you want to replace the missing values with another value instead of omitting them? 
You can do this using the ISNULL() function. Here we replace all the missing values in the Shape column using the word 'Saucer':
SELECT  Shape, ISNULL(Shape, 'Saucer') AS Shape2
FROM Incidents
You can also use ISNULL() to replace values from a different column instead of a specified word.
Write a T-SQL query which only returns rows where IncidentState is missing.
Replace all the missing values in the IncidentState column with the values in the City column and name this new column Location.

-- Check the IncidentState column for missing values and replace them with the City column
SELECT IncidentState, isnull(IncidentState, city) AS Location
FROM Incidents
-- Filter to only return missing values from IncidentState
WHERE IncidentState is null




Replace missing values in Country with the first non-missing value from IncidentState or City, in that order. Name the new column Location.
-- Replace missing values 
SELECT Country, COALESCE(country, IncidentState, City) AS Location
FROM Incidents
WHERE Country IS NULL




Using CASE statements
In this exercise, you will use a CASE statement to create a new column which specifies whether the Country is USA or International.
Create a new column, SourceCountry, defined from these cases:
When Country is 'us' then it takes the value 'USA'.
Otherwise it takes the value 'International'.

SELECT Country, 
       CASE WHEN Country = 'us'  THEN 'USA'
       ELSE 'International'
       END AS SourceCountry
FROM Incidents




Creating several groups with CASE
In this exercise, you will write a CASE statement to group the values in the DurationSeconds into 5 groups based on the following ranges:
DurationSeconds	SecondGroup
<= 120	1
> 120 and <= 600	2
> 600 and <= 1200	3
> 1201 and <= 5000	4
For all other values	5
Create a new column, SecondGroup, that uses the values in the DurationSeconds column based on the ranges mentioned above.
-- Complete the syntax for cutting the duration into different cases
SELECT DurationSeconds, 
-- Start with the 2 TSQL keywords, and after the condition a TSQL word and a value
      case when (DurationSeconds <= 120) then '1'
-- The pattern repeats with the same keyword and after the condition the same word and next value          
       when (DurationSeconds > 120 AND DurationSeconds <= 600) then '2'
-- Use the same syntax here             
       when (DurationSeconds > 601 AND DurationSeconds <= 1200) then '3'
-- Use the same syntax here               
       when (DurationSeconds > 1201 AND DurationSeconds <= 5000) then '4'
-- Specify a value      
       ELSE 5
       END AS SecondGroup   
FROM Incidents


Counting the number of days between dates
In this exercise, you will calculate the difference between the order date and ship date.
Write a query that returns the number of days between OrderDate and ShipDate.




-- datediff(datepart, first_date, second_date)
-- dateadd(datepart, number, date)
-- datepart is MM, DD, YYYY


Counting the number of days between dates
In this exercise, you will calculate the difference between the order date and ship date.
Write a query that returns the number of days between OrderDate and ShipDate.
-- Return the difference in OrderDate and ShipDate
SELECT OrderDate, ShipDate, 
       datediff(dd, OrderDate, ShipDate) AS Duration
FROM Shipments



Adding days to a date
In this exercise, you will calculate the approximate delivery date of an order based on ShipDate.
Write a query that returns the approximate delivery date as five days after the ShipDate.
-- Return the DeliveryDate as 5 days after the ShipDate
SELECT OrderDate, 
       dateadd(dd, 5, ShipDate) AS DeliveryDate
FROM Shipments


Rounding numbers
Sometimes, you only care about the whole dollar amount and want to ignore the decimal values of the cost. 
In this exercise, you will round the cost to the nearest dollar.
Write a SQL query to round the values in the Cost column to the nearest whole number.

-- Round Cost to the nearest dollar
SELECT Cost, 
       round(Cost, 0) AS RoundedCost
FROM Shipments



Truncating numbers
Since rounding can sometimes be misleading, i.e., $16.8 becomes $17 while $16.4 remains $16, 
you may want to truncate the values after the decimal instead of rounding them. 
When you truncate the numbers, both $16.8 and $16.4 remain $16.
In this exercise, you will do just that, truncate the Cost column to a whole number.
Write a SQL query to truncate the values in the Cost column to the nearest whole number.
-- Truncate cost to whole number
SELECT Cost, 
       round(cost, 0, 1) AS TruncateCost
FROM Shipments



Calculating the absolute value
The Shipments table contains some bad data. 
There was a problem with the scales, and the weights show up as negative numbers. 
In this exercise, you will write a query to convert all negative weights to positive weights.
Write a query that converts all the negative values in the DeliveryWeight column to positive values.
-- Return the absolute value of DeliveryWeight
SELECT DeliveryWeight,
       abs(DeliveryWeight) AS AbsoluteValue
FROM Shipments


Calculating squares and square roots
It's time for you to practice calculating squares and square roots of columns.
Write a query that calculates the square and square root of the WeightValue column.
-- Return the square and square root of WeightValue
SELECT WeightValue, 
       square(WeightValue) AS WeightSquare, 
       sqrt(WeightValue) AS WeightSqrt
FROM Shipments




Creating and using variables
In T-SQL, to create a variable you use the DECLARE statement. 
The variables must have an at sign (@) as their first character. Like most things in T-SQL, variables are not case sensitive.
To assign a value to a variable, you can either use the keyword SET or a SELECT statement, then the variable name followed by an equal sign and a value.
Create an integer variable named counter.
Assign the value 20 to this variable.

-- Declare the variable (a SQL Command, the var name, the datatype)
declare @counter int
-- Set the counter to 20
set @counter = 20
-- Select the counter
SELECT @counter


Increment the variable counter by 1 and assign it back to counter.
-- Declare the variable (a SQL Command, the var name, the datatype)
DECLARE @counter INT 
-- Set the counter to 20
SET @counter = 20
-- Select and increment the counter by one 
set @counter = @counter + 1
-- Print the variable
SELECT @counter



Creating a WHILE loop
In this exercise, you will use the variable you created in the previous exercise you write a WHILE loop. 
Recall that structure:
WHILE some_condition 
BEGIN 
    -- Perform some operation here
END
Write a WHILE loop that increments counter by 1 until counter is less than 30.

DECLARE @counter INT 
SET @counter = 20
-- Create a loop
while @counter < 30
-- Loop code starting point
begin
	SELECT @counter = @counter + 1
-- Loop finish
end
-- Check the value of the variable
SELECT @counter




----If statements
declare @ctr int
set @ctr =1
while @ctr<10
begin
set @ctr = @ctr + 1
if @ctr = 4
break
end

if @ctr = 4
break 


