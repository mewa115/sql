Numbering rows
The simplest application for window functions is numbering rows. 
Numbering rows allows you to easily fetch the nth row. 
For example, it would be very difficult to get the 35th row in any given table if you didn't have a column with each row's number.

SELECT
  *,
  -- Assign numbers to each row
  ROW_NUMBER() OVER() AS Row_N
FROM Summer_Medals
ORDER BY Row_N ASC;


Numbering Olympic games in ascending order
The Summer Olympics dataset contains the results of the games between 1896 and 2012. 
The first Summer Olympics were held in 1896, the second in 1900, and so on. 
What if you want to easily query the table to see in which year the 13th Summer Olympics were held? You'd need to number the rows for that.


SELECT
  Year,
  -- Assign numbers to each year
  ROW_NUMBER() OVER() AS Row_N
FROM (
  SELECT distinct city, year
  FROM Summer_Medals
  ORDER BY Year ASC
) AS Years
ORDER BY Year ASC;


Numbering Olympic games in descending order
You've already numbered the rows in the Summer Medals dataset. 
What if you need to reverse the row numbers so that the most recent Olympic games' rows have a lower number?

SELECT
  Year,
  -- Assign the lowest numbers to the most recent years
  ROW_NUMBER() OVER (order by year desc) AS Row_N
FROM (
  SELECT DISTINCT Year
  FROM Summer_Medals
) AS Years
ORDER BY Year;


Numbering Olympic athletes by medals earned
Row numbering can also be used for ranking. 
For example, numbering rows and ordering by the count of medals each athlete earned in the OVER clause will assign 1 to the highest-earning medalist, 
2 to the second highest-earning medalist, and so on.

SELECT
  -- Count the number of medals each athlete has earned
  athlete,
  count(*) AS Medals
FROM Summer_Medals
GROUP BY Athlete
ORDER BY Medals DESC;



Numbering Olympic athletes by medals earned
Row numbering can also be used for ranking. 
For example, numbering rows and ordering by the count of medals each athlete earned in the OVER clause will assign 1 to the highest-earning medalist, 
2 to the second highest-earning medalist, and so on.

WITH Athlete_Medals AS (
  SELECT
    -- Count the number of medals each athlete has earned
    Athlete,
    COUNT(*) AS Medals
  FROM Summer_Medals
  GROUP BY Athlete)

SELECT
  -- Number each athlete by how many medals they've earned
  athlete,
  row_number() OVER (ORDER BY Medals DESC) AS Row_N
FROM Athlete_Medals
ORDER BY Medals DESC;



Reigning weightlifting champions
A reigning champion is a champion who's won both the previous and current years' competitions. 
To determine if a champion is reigning, the previous and current years' results need to be in the same row, in two different columns.
Return each year's gold medalists in the Men's 69KG weightlifting competition.

SELECT
  -- Return each year's champions' countries
  year,
  country AS champion
FROM Summer_Medals
WHERE
  Discipline = 'Weightlifting' AND
  Event = '69KG' AND
  Gender = 'Men' AND
  Medal = 'Gold';
  
  
  
  
Having wrapped the previous query in the Weightlifting_Gold CTE, get the previous year's champion for each year.
  
WITH Weightlifting_Gold AS (
  SELECT
    -- Return each year's champions' countries
    Year,
    Country AS champion
  FROM Summer_Medals
  WHERE
    Discipline = 'Weightlifting' AND
    Event = '69KG' AND
    Gender = 'Men' AND
    Medal = 'Gold')

SELECT
  Year, Champion,
  -- Fetch the previous year's champion
  LAG(Champion,1) OVER
    (ORDER BY YEAR ASC) AS Last_Champion
FROM Weightlifting_Gold
ORDER BY Year ASC;




Reigning champions by gender
You've already fetched the previous year's champion for one event. 
However, if you have multiple events, genders, or other metrics as columns, 
you'll need to split your table into partitions to avoid having a champion from one event or gender appear as the previous champion of another event or gender.
Return the previous champions of each year's event by gender.

WITH Tennis_Gold AS (
  SELECT DISTINCT
    Gender, Year, Country
  FROM Summer_Medals
  WHERE
    Year >= 2000 AND
    Event = 'Javelin Throw' AND
    Medal = 'Gold')

SELECT
  Gender, Year,
  Country AS Champion,
  -- Fetch the previous year's champion by gender
  lag(Country) OVER (Partition by gender
            ORDER BY YEAR ASC) AS Last_Champion
FROM Tennis_Gold
ORDER BY Gender ASC, Year ASC;


Reigning champions by gender and event
In the previous exercise, you partitioned by gender to ensure that data about one gender doesn't get mixed into data about the other gender. 
If you have multiple columns, however, partitioning by only one of them will still mix the results of the other columns.
Return the previous champions of each year's events by gender and event.

WITH Athletics_Gold AS (
  SELECT DISTINCT
    Gender, Year, Event, Country
  FROM Summer_Medals
  WHERE
    Year >= 2000 AND
    Discipline = 'Athletics' AND
    Event IN ('100M', '10000M') AND
    Medal = 'Gold')

SELECT
  Gender, Year, Event,
  Country AS Champion,
  -- Fetch the previous year's champion by gender and event
  lag(Country) OVER (partition by gender, event
            ORDER BY Year ASC) AS Last_Champion
FROM Athletics_Gold
ORDER BY Event ASC, Gender ASC, Year ASC;


Future gold medalists
Fetching functions allow you to get values from different parts of the table into one row.
If you have time-ordered data, you can "peek into the future" with the LEAD fetching function. 
This is especially useful if you want to compare a current value to a future value.
For each year, fetch the current gold medalist and the gold medalist 3 competitions ahead of the current row.



Fetching functions allow you to get values from different parts of the table into one row. 
If you have time-ordered data, you can "peek into the future" with the LEAD fetching function. 
This is especially useful if you want to compare a current value to a future value.
For each year, fetch the current gold medalist and the gold medalist 3 competitions ahead of the current row.

WITH Discus_Medalists AS (
  SELECT DISTINCT
    Year,
    Athlete
  FROM Summer_Medals
  WHERE Medal = 'Gold'
    AND Event = 'Discus Throw'
    AND Gender = 'Women'
    AND Year >= 2000)

SELECT
  -- For each year, fetch the current and future medalists
  year,
  Athlete,
  lead(Athlete,3) OVER (ORDER BY year ASC) AS Future_Champion
FROM Discus_Medalists
ORDER BY Year ASC;


First athlete by name
It's often useful to get the first or last value in a dataset to compare all other values to it. 
With absolute fetching functions like FIRST_VALUE, you can fetch a value at an absolute position in the table, like its beginning or end.
Return all athletes and the first athlete ordered by alphabetical order.

WITH All_Male_Medalists AS (
  SELECT DISTINCT
    Athlete
  FROM Summer_Medals
  WHERE Medal = 'Gold'
    AND Gender = 'Men')

SELECT
  -- Fetch all athletes and the first athlete alphabetically
  athlete,
  first_value(athlete) OVER (
    ORDER BY athlete ASC
  ) AS First_Athlete
FROM All_Male_Medalists;



Last country by name
Just like you can get the first row's value in a dataset, you can get the last row's value. 
This is often useful when you want to compare the most recent value to previous values.
Return the year and the city in which each Olympic games were held.
Fetch the last city in which the Olympic games were held.

WITH Hosts AS (
  SELECT DISTINCT Year, City
    FROM Summer_Medals)

SELECT
  Year,
  City,
  -- Get the last city in which the Olympic games were held
  last_value(city) OVER (
   ORDER BY year ASC
   RANGE BETWEEN
     UNBOUNDED PRECEDING AND
     UNBOUNDED FOLLOWING
  ) AS Last_City
FROM Hosts
ORDER BY Year ASC;


