Simple selections
It's time to begin writing your own queries! In this first coding exercise, you will use SELECT statements to retrieve columns from a database table. 
You'll be working with the eurovision table, which contains data relating to individual country performance at the Eurovision Song Contest from 1998 to 2012.
After selecting columns, you'll also practice renaming columns, and limiting the number of rows returned.

Use TOP to change the existing query so that only the first 50 rows are returned.

-- Limit the number of rows returned
SELECT 
  top (50) points 
FROM 
  eurovision;
  
  

This time, return only half the rows using 'TOP', using the same shortcut as before to return all columns.

-- Return all columns, restricting the percent of rows returned
SELECT 
  top (50) PERCENT * 
FROM 
  eurovision;

LEN'gth of a string
Knowing the length of a string is key to being able to manipulate it further using other functions, so what better way to start the lesson?
Retrieve the length of the description column, returning the results as description_length.

-- Calculate the length of the description column
SELECT 
  len (description) AS description_length 
FROM 
  grid;
  
  
  
Stuck in the middle with you
You might be fortunate, and find that the interesting parts of your strings are at either end. 
However, chances are, you'll want to retrieve characters from somewhere around the middle. 
Let's see how to use RIGHT, LEN, CHARINDEX AND SUBSTRING to extract the interior portion of a text string. 
The description column can contain multiple reasons for power outages in each row. 
We want to extract any additional causes of outage whenever Weather appears in the description column.
Now we use SUBSTRING to return everything after Weather for the first ten rows. 
The start index here is 15, because the CHARINDEX for each row is 8, and the LEN of Weather is 7.

-- Complete the substring function to begin extracting from the correct character in the description column
SELECT TOP (10)
  description, 
  CHARINDEX('Weather', description) AS start_of_string, 
  LEN ('Weather') AS length_of_string, 
  SUBSTRING(
    description, 
    15, 
    LEN(description)
  ) AS additional_description 
FROM 
  grid
WHERE description LIKE '%Weather%';




Having
WHERE is used to filter rows before any grouping occurs. 
Once you have performed a grouping operation, you may want to further restrict the number of rows returned. 
This is a job for HAVING. In this exercise, you will modify an existing query to use HAVING, so that only those results with a sum of over 10000 are returned.
Modify the provided query to remove the WHERE clause.
Replace it with a HAVING clause so that only results with a total demand_loss_mw of greater than 10000 are returned.

SELECT 
  nerc_region, 
  SUM (demand_loss_mw) AS demand_loss 
FROM 
  grid 
  -- Remove the WHERE clause
WHERE demand_loss_mw  IS NOT NULL
GROUP BY 
  nerc_region 
  -- Enter a new HAVING clause so that the sum of demand_loss_mw is greater than 10000
having 
  sum(demand_loss_mw) > 10000 
ORDER BY 
  demand_loss DESC;
  


Create a table named 'results' with 4 VARCHAR columns called track, artist, and album, with lengths 200, 120, and 160, respectively and last one integer.
  -- Create the table
CREATE TABLE results (
	-- Create track column
	track VARCHAR(200),
    -- Create artist column
	artist VARCHAR(120),
    -- Create album column
	album VARCHAR(160),
	-- Create track_length_mins
	track_length_mins INT,
	);


Insert the track 'Basket Case', from the album 'Dookie', with a track length of 3, into the appropriate columns. 
Then perform the SELECT * once more to view your newly inserted row.
-- Create the table
CREATE TABLE tracks(
  -- Create track column
  track VARCHAR(200), 
  -- Create album column
  album VARCHAR(160), 
  -- Create track_length_mins column
  track_length_mins INT
);
-- Complete the statement to enter the data to the table         
insert INTO tracks
-- Specify the destination columns
(track, album, track_length_mins)
-- Insert the appropriate values for track, album and track length
VALUES
  ('Basket Case', 'Dookie', 3);
-- Select all columns from the new table
SELECT 
  *
FROM 
  tracks;
  
  

That's a very long album title, isn't it?
Use an UPDATE statement to modify the title to 'Pure Cult: The Best Of The Cult'.
-- Run the query
SELECT 
  title 
FROM 
  album 
WHERE 
  album_id = 213;
-- UPDATE the album table
update  
  album
-- SET the new title    
set 
  title = 'Pure Cult: The Best Of The Cult'
WHERE album_id = 213;


DELETE the record from album where album_id is 1 and then hit 'Submit Answer'.

-- Run the query
SELECT 
  * 
FROM 
  album 
  -- DELETE the record
delete FROM 
  album 
WHERE 
  album_id = 1;
  -- Run the query again
SELECT 
  * 
FROM 
  album;
  
  
-- Declare your variables
DECLARE @start DATE
DECLARE @stop DATE
DECLARE @affected INT;
-- SET the relevant values for each variable
SET @start = '2014-01-24'
SET @stop  = '2014-07-02'
SET @affected =  5000 ;

SELECT 
  description,
  nerc_region,
  demand_loss_mw,
  affected_customers
FROM 
  grid
-- Specify the date range of the event_date and the value for @affected
where event_date between @start AND @stop
AND affected_customers >= @affected;






